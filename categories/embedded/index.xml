<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Embedded on Lazytrick - Limited size memory of mind</title>
    <link>https://blog.lazytrick.com/categories/embedded/</link>
    <description>Recent content in Embedded on Lazytrick - Limited size memory of mind</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2019 Minatu2d</copyright>
    <lastBuildDate>Sun, 02 Apr 2017 14:29:17 +0900</lastBuildDate>
    
	<atom:link href="https://blog.lazytrick.com/categories/embedded/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4 thành phần của Embedded Linux</title>
      <link>https://blog.lazytrick.com/post/2017-04-02-4-thanh-phan-cua-embedded-linux/</link>
      <pubDate>Sun, 02 Apr 2017 14:29:17 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2017-04-02-4-thanh-phan-cua-embedded-linux/</guid>
      <description>Ta biết rằng Linux chạy ở khắp nơi từ siêu máy tính, máy chủ, máy để bàn (máy xách tay), điện thoại (android)&amp;hellip;cho đến các thiết bị gia dụng, gia đình.
Khi sử dụng máy tính cá nhân, server ta dễ dàng &amp;ldquo;sờ&amp;rdquo; thấy được các thành phần của Linux như các tiến trình, shell..etc.
Hầu hết các bản phân phối phổ biến làm hết những thứ liên quan đến phần cứng, nhân hệ điều hành, driver cho ta rồi.</description>
    </item>
    
    <item>
      <title>So sánh giữa Buildroot và Yocto Project</title>
      <link>https://blog.lazytrick.com/post/2017-01-20-so-sanh-buildroot-va-yocto-project/</link>
      <pubDate>Fri, 20 Jan 2017 01:22:46 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2017-01-20-so-sanh-buildroot-va-yocto-project/</guid>
      <description>Bài này sẽ dịch lại Slide thảo luận giữa 2 diễn giả là Alexandre Belloni, Thomas Petazzoni
từ Free Electrons tại Embedded Linux Conference 2016.
So sánh giữa Buildroot và OpenEmbedded/Yocto Project
1. Điểm chung  Đều là build-system cho Embedded Linux.
Mục tiêu là có thể customize, build hoàn chỉnh một Embedded Linux System.
Bao gồm: filesystem, toolchain, kernel, bootloaders Đều được build từ source Sử dụng cross-compilation Rất actively trong cả dự án đang maintained và phát triển.</description>
    </item>
    
    <item>
      <title>Quá trình load firmware của Driver trong Linux</title>
      <link>https://blog.lazytrick.com/post/2016-09-05-qua-trinh-load-firmware-cua-driver-trong-linux/</link>
      <pubDate>Mon, 05 Sep 2016 01:44:02 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-09-05-qua-trinh-load-firmware-cua-driver-trong-linux/</guid>
      <description>Để các kernel module sử dụng được các firmware thì cần 2 điều kiện sau:  Khi kernel được build, các tham số sau phải được bật (ENABLE)
CONFIG_FW_LOADER : Cho phép load firmware
CONFIG_EXTRA_FIRMWARE &amp;gt; CONFIG_EXTRA_FIRMWARE_DIR : Đường dẫn chưa các firmware. Các firmware phải được copy vào thư mục CONFIG_EXTRA_FIRMWARE_DIR đã set ở trên.  Một số điều lưu ý liên quan đến firmware:  Các firmware là binary(closed source) được cung cấp từ các nhà sản xuất thiết bị,</description>
    </item>
    
    <item>
      <title>Driver và Firmware trong Linux</title>
      <link>https://blog.lazytrick.com/post/2016-08-29-khai-niem-driver-va-firmware-trong-linux/</link>
      <pubDate>Mon, 29 Aug 2016 08:25:25 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-29-khai-niem-driver-va-firmware-trong-linux/</guid>
      <description>Gần đây, khi tìm hiểu cách cài đặt driver cho USB Wifi, mình có tìm hiểu thêm về quá trình tạo nhân Linux. Đặc biệt, việc thiết lập cấu hình trước khi build tạo ảnh của kernel.
Mình thấy ngoài Driver, tức là thành phần trung gian giữa ứng dụng và phần cứng, còn có 1 khái niệm nữa. Đó là Firmware.
Bài này sẽ dịch lại trang, để hiểu qua về Firmware trong Linux Kernel.</description>
    </item>
    
    <item>
      <title>Tìm Driver cho Linux</title>
      <link>https://blog.lazytrick.com/post/2016-08-19-xac-dinh-cac-driver-module-dang-duoc-su-dung-tren-linux/</link>
      <pubDate>Fri, 19 Aug 2016 01:38:50 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-19-xac-dinh-cac-driver-module-dang-duoc-su-dung-tren-linux/</guid>
      <description>Trong quá trình tìm cách cài đặt driver cho bản build Raspberry PI sử dụng Yocto, mình có tìm hiểu driver trong Linux và tìm được cuốn sách Linux in A Nutshell (link tại đây ) của pro này.
Chương 7, chương mà tác giả đặc biệt &amp;ldquo;tự hào&amp;rdquo;, nói về Customize một Linux Kernel.
Trong chương này, tác giả cũng nói đến việc xác định các driver đang được sử dụng trên hệ thống hiện tại.</description>
    </item>
    
    <item>
      <title>Một chút về Driver cho USB Device trong Linux</title>
      <link>https://blog.lazytrick.com/post/2016-08-15-mot-chut-ve-driver-cho-usb-device-trong-linux/</link>
      <pubDate>Mon, 15 Aug 2016 05:47:10 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-15-mot-chut-ve-driver-cho-usb-device-trong-linux/</guid>
      <description>Trong loại bài dịch trước đây nói về USB, tôi có nhắc một chút đến việc load đúng driver thì phía Host làm thế nào?
Như ta đã biết, khi một thiết bị USB được cắm vào máy (Host), phía Host sẽ thực hiện một loạt thao tác từ xác định nguồn (bus, hay self), lấy thông tin tốc độ, các thông tin về descriptor (thiết bị, giao diện, các Endpoint).</description>
    </item>
    
    <item>
      <title>Cài thêm driver usb-wifi adapter cho bản build Raspbery PI sử dụng Yocto Project</title>
      <link>https://blog.lazytrick.com/post/2016-08-11-cai-them-driver-usb-wifi-adapter-cho-ban-build-raspbery-pi-su-dung-yocto-project-chua-xong/</link>
      <pubDate>Thu, 11 Aug 2016 15:04:03 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-11-cai-them-driver-usb-wifi-adapter-cho-ban-build-raspbery-pi-su-dung-yocto-project-chua-xong/</guid>
      <description>Như ta đã làm trong bài trước, sau khi thực hiện việc setup các biến môi trường bằng lệnh source, ta thực hiện build tạo image có có tên là rpi-basic-image thông qua lệnh:
$bitbake rpi-basic-image  Thực ra còn 2 image khác ta có thể build đó là rpi-hwup-image rpi-test-image. Ta có thể thấy 2 file bb cho 2 image ở thư mục meta-raspberrypi/recipes-core/images/.
rpi-hwup-image : là image nhỏ nhất (có dịp sẽ thử)</description>
    </item>
    
    <item>
      <title>Thiết lập IP mặc định của bản build Linux cho Raspberry PI bằng Yocto Project</title>
      <link>https://blog.lazytrick.com/post/2016-08-06-thiet-lap-ip-mac-dinh-cua-ban-build-linux-cho-raspberry-pi-bang-yocto-project-chua-xong/</link>
      <pubDate>Sat, 06 Aug 2016 17:08:17 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-06-thiet-lap-ip-mac-dinh-cua-ban-build-linux-cho-raspberry-pi-bang-yocto-project-chua-xong/</guid>
      <description>Để tiếp tục customize bản OS được build trong bài trước.
Hôm nay ta sẽ thực hiện một nhiệm nhỏ. Đó là thiết lập một IP cho bản build.
Tức là ta sẽ thiết lập 1 IP mặc định được gán cho Raspberry PI khi nó được khởi động bằng bản build của chúng ta.
Như thường lệ ta cần thiết lập các biến môi trường trước khi định thực hiện bất cứ thay đổi nào trên bản build.</description>
    </item>
    
    <item>
      <title>Thêm samba server vào bản build Linux cho Raspberry PI bằng Yocto Project</title>
      <link>https://blog.lazytrick.com/post/2016-08-06-them-samba-server-vao-ban-build-linux-cho-raspberry-pi-bang-yocto-project/</link>
      <pubDate>Sat, 06 Aug 2016 16:05:42 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-06-them-samba-server-vao-ban-build-linux-cho-raspberry-pi-bang-yocto-project/</guid>
      <description>Ta đã nói đến việc build một bản phân phối Linux cho Raspberry PI ở bài Tạo một bản phân phối Linux cho Raspberry PI bằng Yocto Project.
Một trong những giao thức truy cập file phổ biến nhất hiên nay là SMB, vốn ban đầu được hỗ trợ trên các máy Windows, dùng cho giao thức chia sẻ file trong mạng nội bộ. Trên Linux, để tạo một server như thế, người ta dùng Samba (cái tên cũng na ná nhỉ).</description>
    </item>
    
    <item>
      <title>Phân biệt Build vs Host vs Target</title>
      <link>https://blog.lazytrick.com/post/2016-08-03-cac-khai-niem-trong-cross-compiling/</link>
      <pubDate>Wed, 03 Aug 2016 01:24:36 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-03-cac-khai-niem-trong-cross-compiling/</guid>
      <description>Khái niệm Cross-compiling là rất phổ biến khi phát triển các hệ thống nhúng.
Với người mới, hiểu rõ khái niệm là rất quan trọng.
Bài này sẽ cố gắng phân biệt 3 khái niệm về môi trường. Đó là Host Enviroment, Build Enviroment, và Target Enviroment. Có thể dịch nôm na là Môi trường chủ, Môi trường biên dịch, và Môi trường chạy đích.
Vì có thể dẫn đến hiểu nhầm hoặc không rõ nghĩa nên chúng ta nên sử dụng trực tiếp thì hơn.</description>
    </item>
    
    <item>
      <title>Tạo một bản build Linux cho Raspberry PI bằng Yocto Project</title>
      <link>https://blog.lazytrick.com/post/2016-07-29-tao-nas-server-tren-pi-bang-yocto-project/</link>
      <pubDate>Fri, 29 Jul 2016 08:06:07 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-07-29-tao-nas-server-tren-pi-bang-yocto-project/</guid>
      <description>Ban đầu, dự định sẽ tạo một NAS server theo link tham khảo bên dưới.
Nhưng thấy ta nên tách riêng phần tạo bản phân phối Linux thành 1 bài riêng, rồi viết các nội dung liên quan đến customize thành các bài khác sẽ dễ hiểu hơn.
Hơn nữa, phần tạo bản build basic sẽ cần được thảo luận kĩ hơn do có thể phát sinh nhiều vấn đề.</description>
    </item>
    
    <item>
      <title>Về Renesas FIT - Firmware Intergrated Technology</title>
      <link>https://blog.lazytrick.com/post/2016-01-25-ve-renesas-fit-firmware-intergrated-technology/</link>
      <pubDate>Mon, 25 Jan 2016 14:31:47 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-01-25-ve-renesas-fit-firmware-intergrated-technology/</guid>
      <description>Kinh nghiệm lập trình với Microcontroller chưa nhiều, chỉ mới 3 năm không liên tục. Nhưng cũng thấy phần nào được một ít gọi là cái hay của một công nghệ (thực ra cứ gọi là công nghệ thôi, chứ nhiều lúc công nghệ với kĩ thuật cũng khá gần nhau). Đó là FIT viết tắt của Firmware Intergration Technology (FIT) của Renesas.
Theo những gì Renesas cung cấp, công nghệ này được sử dụng trong các dòng Chip RX từ RX63M, RX64M&amp;hellip;RX113).</description>
    </item>
    
    <item>
      <title>Bộ nhớ Flash</title>
      <link>https://blog.lazytrick.com/post/2016-01-25-bo-nho-flash-se-viet/</link>
      <pubDate>Mon, 25 Jan 2016 14:29:09 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-01-25-bo-nho-flash-se-viet/</guid>
      <description>Để thành 1 bài thì hơi nhiều, những thôi đã để thành 1 bài thì vẫn phải viết.
Lập trình với bộ nhớ Flash Nếu là Flash memory, khi lập trình nhất định phải có một thao tác xóa trước một thao tác ghi. Sau khi xóa, giá trị tất cả các ô nhớ là 1, tức là nếu đọc ra ta sẽ thấy toàn 0xFF thôi.
Serial Flash Có rất nhiều loại Flash, nhưng trên các ứng dụng embedded thì Serial Flash được sử dụng phổ biến nhất.</description>
    </item>
    
    <item>
      <title>Giao thức MQTT</title>
      <link>https://blog.lazytrick.com/post/2015-08-04-giao-thuc-mqtt/</link>
      <pubDate>Tue, 04 Aug 2015 14:56:02 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2015-08-04-giao-thuc-mqtt/</guid>
      <description>Bài này dự là sẽ dịch lại đặc của giao thức MQTT này, nhằm có một cách hiểu tổng quát về MQTT protocol.
Link gốc :
http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html
Update 2017/03/24: Bản dịch của MQTT đã được chuyển sang địa chỉ sau:
http://minatu2d.github.io/</description>
    </item>
    
    <item>
      <title>[OE] Build một bản Linux cho Raspberry PI B&#43; sử dụng OpenEmbedded</title>
      <link>https://blog.lazytrick.com/post/2015-04-25-oe-build-mot-ban-linux-cho-raspberry-pi-b-su-dung-openembedded/</link>
      <pubDate>Sat, 25 Apr 2015 15:30:15 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2015-04-25-oe-build-mot-ban-linux-cho-raspberry-pi-b-su-dung-openembedded/</guid>
      <description>Poky là một hệ distro linux ở dạng tham chiếu của Yocto Project.
OpenEmbedded là một phần trong đó.
Nào thế đủ rồi, ta đi vào phần chính.
1. Về Yocto project và ứng dụng cho Rasberry PI Lần trước, tôi có viết một hứng về việc tạo ra một ảnh cho Raspberry dựa trên Raspbian (chụp lại ảnh của một hệ thống đang chạy). Với kết quả lúc trước, thì vấn đề là nó không thực sự nhỏ hơn, khi giải nén ra nó vẫn chiếm khoảng 414MB.</description>
    </item>
    
    <item>
      <title>[OE]Bitbake - Từ Hello World đến một Distro</title>
      <link>https://blog.lazytrick.com/post/2015-04-25-oebitbake-tu-hello-world-den-mot-distro/</link>
      <pubDate>Sat, 25 Apr 2015 07:50:24 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2015-04-25-oebitbake-tu-hello-world-den-mot-distro/</guid>
      <description>Bitbake là một công cụ cốt lõi của Yocto Project. Nó bao gồm 1 bộ thông dịch các script được viết trong các file recipe (công thức tạo phần mềm), và thực hiện các lệnh trong đó. Nó mô tả lại và tự động hóa qúa trình người ta đưa một phần mềm vào một distro.
Về việc đưa một phần mềm vào distro, ta có thể thấy nó bao gồm vài step chính.</description>
    </item>
    
    <item>
      <title>OpenEmbedded là gì?</title>
      <link>https://blog.lazytrick.com/post/2015-02-11-openembedded-la-gi/</link>
      <pubDate>Wed, 11 Feb 2015 09:21:19 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2015-02-11-openembedded-la-gi/</guid>
      <description>Cái gì liên quan đến Linux, Embedded thì mình tìm hiểu kĩ nhất có thể. Trừ những chỗ không thể sờ vào hoặc cực kì mất thời gian để tìm hiểu nó thì mình sẽ bỏ quá.
Đại khái sẽ trả lời mấy câu hỏi sau
 OpenEmbedded là cái L gì?
 Tại sao người ta dùng nó?
 Những cách tiếp cận với em nó ở mức độ SW</description>
    </item>
    
  </channel>
</rss>