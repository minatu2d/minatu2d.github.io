<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Driver on Lazytrick</title>
    <link>https://blog.lazytrick.com/tags/driver/</link>
    <description>Recent content in Driver on Lazytrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2019 Minatu2d</copyright>
    <lastBuildDate>Mon, 05 Sep 2016 01:44:02 +0900</lastBuildDate>
    
	<atom:link href="https://blog.lazytrick.com/tags/driver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quá trình load firmware của Driver trong Linux</title>
      <link>https://blog.lazytrick.com/post/2016-09-05-qua-trinh-load-firmware-cua-driver-trong-linux/</link>
      <pubDate>Mon, 05 Sep 2016 01:44:02 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-09-05-qua-trinh-load-firmware-cua-driver-trong-linux/</guid>
      <description>Để các kernel module sử dụng được các firmware thì cần 2 điều kiện sau:
 Khi kernel được build, các tham số sau phải được bật (ENABLE)
CONFIG_FW_LOADER : Cho phép load firmware
CONFIG_EXTRA_FIRMWARE &amp;gt; CONFIG_EXTRA_FIRMWARE_DIR : Đường dẫn chưa các firmware. Các firmware phải được copy vào thư mục CONFIG_EXTRA_FIRMWARE_DIR đã set ở trên.  Một số điều lưu ý liên quan đến firmware:
 Các firmware là binary(closed source) được cung cấp từ các nhà sản xuất thiết bị,</description>
    </item>
    
    <item>
      <title>Driver và Firmware trong Linux</title>
      <link>https://blog.lazytrick.com/post/2016-08-29-khai-niem-driver-va-firmware-trong-linux/</link>
      <pubDate>Mon, 29 Aug 2016 08:25:25 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-29-khai-niem-driver-va-firmware-trong-linux/</guid>
      <description>Gần đây, khi tìm hiểu cách cài đặt driver cho USB Wifi, mình có tìm hiểu thêm về quá trình tạo nhân Linux. Đặc biệt, việc thiết lập cấu hình trước khi build tạo ảnh của kernel.
Mình thấy ngoài Driver, tức là thành phần trung gian giữa ứng dụng và phần cứng, còn có 1 khái niệm nữa. Đó là Firmware.
Bài này sẽ dịch lại trang, để hiểu qua về Firmware trong Linux Kernel.</description>
    </item>
    
    <item>
      <title>Tìm Driver cho Linux</title>
      <link>https://blog.lazytrick.com/post/2016-08-19-xac-dinh-cac-driver-module-dang-duoc-su-dung-tren-linux/</link>
      <pubDate>Fri, 19 Aug 2016 01:38:50 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-19-xac-dinh-cac-driver-module-dang-duoc-su-dung-tren-linux/</guid>
      <description>Trong quá trình tìm cách cài đặt driver cho bản build Raspberry PI sử dụng Yocto, mình có tìm hiểu driver trong Linux và tìm được cuốn sách Linux in A Nutshell (link tại đây ) của pro này.
Chương 7, chương mà tác giả đặc biệt &amp;ldquo;tự hào&amp;rdquo;, nói về Customize một Linux Kernel.
Trong chương này, tác giả cũng nói đến việc xác định các driver đang được sử dụng trên hệ thống hiện tại.</description>
    </item>
    
    <item>
      <title>Một chút về Driver cho USB Device trong Linux</title>
      <link>https://blog.lazytrick.com/post/2016-08-15-mot-chut-ve-driver-cho-usb-device-trong-linux/</link>
      <pubDate>Mon, 15 Aug 2016 05:47:10 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-15-mot-chut-ve-driver-cho-usb-device-trong-linux/</guid>
      <description>Trong loại bài dịch trước đây nói về USB, tôi có nhắc một chút đến việc load đúng driver thì phía Host làm thế nào?
Như ta đã biết, khi một thiết bị USB được cắm vào máy (Host), phía Host sẽ thực hiện một loạt thao tác từ xác định nguồn (bus, hay self), lấy thông tin tốc độ, các thông tin về descriptor (thiết bị, giao diện, các Endpoint).</description>
    </item>
    
    <item>
      <title>Cài thêm driver usb-wifi adapter cho bản build Raspbery PI sử dụng Yocto Project</title>
      <link>https://blog.lazytrick.com/post/2016-08-11-cai-them-driver-usb-wifi-adapter-cho-ban-build-raspbery-pi-su-dung-yocto-project-chua-xong/</link>
      <pubDate>Thu, 11 Aug 2016 15:04:03 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-08-11-cai-them-driver-usb-wifi-adapter-cho-ban-build-raspbery-pi-su-dung-yocto-project-chua-xong/</guid>
      <description>Như ta đã làm trong bài trước, sau khi thực hiện việc setup các biến môi trường bằng lệnh source, ta thực hiện build tạo image có có tên là rpi-basic-image thông qua lệnh:
$bitbake rpi-basic-image  Thực ra còn 2 image khác ta có thể build đó là rpi-hwup-image rpi-test-image. Ta có thể thấy 2 file bb cho 2 image ở thư mục meta-raspberrypi/recipes-core/images/.
rpi-hwup-image : là image nhỏ nhất (có dịp sẽ thử)</description>
    </item>
    
    <item>
      <title>Porting Non-OS Driver sang ITRON-based OS</title>
      <link>https://blog.lazytrick.com/post/2016-01-25-porting-non-os-driver-sang-itron-based-os/</link>
      <pubDate>Mon, 25 Jan 2016 14:27:20 +0900</pubDate>
      
      <guid>https://blog.lazytrick.com/post/2016-01-25-porting-non-os-driver-sang-itron-based-os/</guid>
      <description>Hệ điều hành ITRON-based</description>
    </item>
    
  </channel>
</rss>